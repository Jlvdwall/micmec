 ||==================================||  
 ||   __      __    ___     _____    ||
 ||    \      /      |     /    /    ||
 ||    |\    /|      |     |         ||
 ||    | \  / |      |     |         ||
 ||   _|_ \/ _|_    _|_    |____|    ||
 ||   __      __  _______   _____    ||
 ||    \      /    |    /  /    /    ||
 ||    |\    /|    |____   |         ||
 ||    | \  / |    |       |         ||
 ||   _|_ \/ _|_  _|____|  |____|    ||
 ||                                  ||
 ||==================================||

MicMec is the Python implementation of the micromechanical model. The micromechanical model is a novel coarse graining
technique for either force fields or ab initio data in metal-organic frameworks (MOFs), aimed at investigating the 
mechanical properties of these materials on length scales of up to a micrometer. This is also the main topic of my 
thesis work at the Center for Molecular Modelling (Ghent University). The theoretical groundwork of the micromechanical
model can be found in:

    [29] S. M. J. Rogge, “The micromechanical model to computationally investigate cooperative and cor-
    related phenomena in metal-organic frameworks,” Faraday Discuss., vol. 225, pp. 271–285, 2020.

MicMec is, essentially, a molecular dynamics code for micromechanical systems. Its architecture is intentially similar
to YAFF, a molecular dynamics code for atomic force fields developed at the CMM. 

MicMec is still a work in progress and not ready for release, but the following functionality has been included:

    - a Builder application written with Python's tkinter library: this application allows the user to build and save 
        their own micromechanical system (input files are .pickle files, output files are .chk files).
    
    - a System class to represent all attributes of a micromechanical system, i.e. the types of unit cells, 
        the positions of the coarse-grained nodes, etc. (input files are .chk files).

    - a MicMecForceField class where the analytical expression for the force acting on a coarse-grained node is
        evaluated as a many-body function of the coordinates of the surrounding nodes.
    
    - a VerletIntegrator class to integrate Newton's equations of motion of the coarse-grained nodes.

    - pressure and temperature control via a wide variety of Thermostat and Barostat classes.

    - geometry optimization


        
